mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p)
p_value = rbind(as.data.frame(try_this), p_value)}
head(p_value)
p_value
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value,
effect = (qnorm(p))/sqrt((length(measured_value[genotype==i]))+length(measured_value[genotype == "Col0"])))%>%
mutate(genotype = i)%>%
#mutate(effect = (qnorm(p))/sqrt((length(measured_value[genotype==i]))+length(measured_value[genotype == "Col0"])))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p)
p_value = rbind(as.data.frame(try_this), p_value)}
head(p_value)
try_again = try_again%>%group_by(time_point, measurement)%>%mutate(p_adj = p.adjust(p, method = "fdr"))%>%ungroup()
try_again = gather(try_again, type, p, p, p_adj)%>%arrange(genotype, time_point)
ggplot(try_again, aes(x=p, color=type)) +
geom_histogram(fill="white", alpha=1, position="identity", size = 2)+
geom_vline(xintercept=0.05, color = "red", size = 1.5)+
theme_igray(base_family = "Calibri",
base_size = 20)+
labs(title = "P-Value with FDR Correction, grouped by time point and measurement type")+
geom_text(aes(x = 0.13, label = "p=0.05", y =  5000), color = "red", size = 8)
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value,
n_wt = length(measured_value[genotype == "Col0"]), n_genotype = length(measured_value[genotype == i]))%>%
mutate(genotype = i)%>%
mutate(effect = (qnorm(p))/sqrt(n_wt+n_genotype))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p)
p_value = rbind(as.data.frame(try_this), p_value)}
head(p_value)
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
head(p_value)
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value,
n_wt = length(measured_value[genotype == "Col0"]), n_genotype = length(measured_value[genotype == i]))%>%
mutate(genotype = i)%>%
# mutate(effect = (qnorm(p))/sqrt(n_wt+n_genotype))%>%
# mutate(effect_size = case_when(
#   (effect <0.2)~"small",
#   (effect>0.2 & effect < 0.5)~"medium",
#   (effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p)
p_value = rbind(as.data.frame(try_this), p_value)}
head(p_value)
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_wt = length(measured_value[genotype == i]), n_genotype = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
mutate(a = 1)%>%
# mutate(effect = (qnorm(p))/sqrt(n_wt+n_genotype))%>%
# mutate(effect_size = case_when(
#   (effect <0.2)~"small",
#   (effect>0.2 & effect < 0.5)~"medium",
#   (effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p)
p_value = rbind(as.data.frame(try_this), p_value)}
head(p_value)
length(feb_data$measured_value)
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_wt = length(measured_value[genotype == i]), n_genotype = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
mutate(effect = (qnorm(p))/sqrt(n_wt+n_genotype))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype, effect, effect_size)%>%
p_value = rbind(as.data.frame(try_this), p_value)}
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_wt = length(measured_value[genotype == i]), n_genotype = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
mutate(effect = (qnorm(p))/sqrt(n_wt+n_genotype))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype, effect, effect_size)%>%
p_value = rbind(as.data.frame(try_this), p_value)}
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_wt = length(measured_value[genotype == i]), n_genotype = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
mutate(effect = (qnorm(p))/sqrt(n_wt+n_genotype))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype, effect, effect_size)
p_value = rbind(as.data.frame(try_this), p_value)}
head(p_value)
###############################################
# Beginning investigations for comparisions to WT
###############################################
p_value = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_wt = length(measured_value[genotype == i]), n_genotype = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
mutate(effect = abs((qnorm(p))/sqrt(n_wt+n_genotype)))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype, effect, effect_size)
p_value = rbind(as.data.frame(try_this), p_value)}
head(p_value)
summary(p_value$effect)
p_value$effect
summary(p_value$n_genotype)
summary(p_value$n_wildtype)
summary(p_value$n_wt)
qnorm(1)
p_value$effect
length(which(p_value$effect==Inf))
length(p_value)
nrow(p_value)
p_value = p_value%>%distinct()
nrow(p_value)
length(which(p_value$effect==Inf))
1541/34656
###Inf value makes sense, because qnorm 1 is infinity
###We have qnorm values equal to one whenever we have Col0
p_value = p_value%>%mutate(p_adj = p.adjust(p, method = "fdr"))
p_value = gather(p_value, type, p, p, p_adj)%>%arrange(genotype, time_point)
head(p_value)
try_again = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_genotype = length(measured_value[genotype == i]), n_wt = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
mutate(effect = abs((qnorm(p))/sqrt(n_wt+n_genotype)))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype, effect, effect_size)
try_again = rbind(as.data.frame(try_this), try_again)}
hist(p_value$effect)
hist(try_again$effect)
try_again = try_again%>%distinct()
try_again = try_again%>%group_by(time_point, measurement)%>%mutate(p_adj = p.adjust(p, method = "fdr"))%>%ungroup()
try_again = gather(try_again, type, p, p, p_adj)%>%arrange(genotype, time_point)
ggplot(try_again, aes(x=p, color=type)) +
geom_histogram(fill="white", alpha=1, position="identity", size = 2)+
geom_vline(xintercept=0.05, color = "red", size = 1.5)+
theme_igray(base_family = "Calibri",
base_size = 20)+
labs(title = "P-Value with FDR Correction, grouped by time point and measurement type")+
geom_text(aes(x = 0.13, label = "p=0.05", y =  5000), color = "red", size = 8)
ggplot(try_again, aes(x=p, color=type)) +
geom_histogram(fill="white", alpha=1, position="identity", size = 2)+
geom_vline(xintercept=0.05, color = "red", size = 1.5)+
theme_igray(base_family = "Calibri",
base_size = 15)+
labs(title = "P-Value with FDR Correction, grouped by time point and measurement type")+
geom_text(aes(x = 0.13, label = "p=0.05", y =  5000), color = "red", size = 8)
try_again%>%group_by(type)%>%summarize(p_lessthan_0.05 = sum(p<0.05), p_0.05_0.1 = sum(0.05<p & p<0.1), p_0.1_0.2 = sum(0.1<p & p<0.2))
unique(p_value$type)
npq_p <- filter(try_again, measurement == "npq", type == "p_adj")
leafarea_p <- filter(try_again, measurement == "leafarea", type == "p_adj")
phi2_p <- filter(try_again, measurement == "phi2", type == "p_adj")
################################################
# P-Value: NPQ
################################################
ggplot(data = npq_p, aes(x = time_point, y = genotype, fill = p)) +
labs(fill = "P-Value", x = "Hours", y = NULL, title = "P-Value for NPQ using a Wilcox Test")+
geom_tile(width = 10 , height = 20)+
facet_grid(genotype ~ day, scales = "free", switch = "y")+
scale_x_continuous(breaks = round(c(0,15,24,39.5,48,63.7,72,87,96,112,120,135,144,159,168,183,192,207,216,231,240,255,264,279),0))+
theme_tufte(base_family = "Calibri",
base_size = 20)+
theme(strip.background.y = element_blank(),
strip.text.y = element_blank(),
panel.spacing=unit(0, "lines"))+
# scale_fill_gradient2(low = "red", high="white", midpoint = 0.5)
scale_fill_gradient(trans = "log", low = "green", high = "black", breaks = c(0, 0.001, 0.05, 0.5))
################################################
# P-Value: NPQ
################################################
ggplot(data = npq_p, aes(x = time_point, y = genotype, fill = p)) +
labs(fill = "P-Value, with FDR Correction", x = "Hours", y = NULL, title = "P-Value for NPQ using a Wilcox Test")+
geom_tile(width = 10 , height = 20)+
facet_grid(genotype ~ day, scales = "free", switch = "y")+
scale_x_continuous(breaks = round(c(0,15,24,39.5,48,63.7,72,87,96,112,120,135,144,159,168,183,192,207,216,231,240,255,264,279),0))+
theme_tufte(base_family = "Calibri",
base_size = 20)+
theme(strip.background.y = element_blank(),
strip.text.y = element_blank(),
panel.spacing=unit(0, "lines"))+
# scale_fill_gradient2(low = "red", high="white", midpoint = 0.5)
scale_fill_gradient(trans = "log", low = "green", high = "black", breaks = c(0, 0.001, 0.05, 0.5))
################################################
# P-Value: NPQ
################################################
ggplot(data = npq_p, aes(x = time_point, y = genotype, fill = p)) +
labs(fill = "P-Value, /n with FDR Correction", x = "Hours", y = NULL, title = "P-Value for NPQ using a Wilcox Test")+
geom_tile(width = 10 , height = 20)+
facet_grid(genotype ~ day, scales = "free", switch = "y")+
scale_x_continuous(breaks = round(c(0,15,24,39.5,48,63.7,72,87,96,112,120,135,144,159,168,183,192,207,216,231,240,255,264,279),0))+
theme_tufte(base_family = "Calibri",
base_size = 20)+
theme(strip.background.y = element_blank(),
strip.text.y = element_blank(),
panel.spacing=unit(0, "lines"))+
# scale_fill_gradient2(low = "red", high="white", midpoint = 0.5)
scale_fill_gradient(trans = "log", low = "green", high = "black", breaks = c(0, 0.001, 0.05, 0.5))
################################################
# P-Value: NPQ
################################################
ggplot(data = npq_p, aes(x = time_point, y = genotype, fill = p)) +
labs(fill = "P-Value, \n with FDR Correction", x = "Hours", y = NULL, title = "P-Value for NPQ using a Wilcox Test")+
geom_tile(width = 10 , height = 20)+
facet_grid(genotype ~ day, scales = "free", switch = "y")+
scale_x_continuous(breaks = round(c(0,15,24,39.5,48,63.7,72,87,96,112,120,135,144,159,168,183,192,207,216,231,240,255,264,279),0))+
theme_tufte(base_family = "Calibri",
base_size = 20)+
theme(strip.background.y = element_blank(),
strip.text.y = element_blank(),
panel.spacing=unit(0, "lines"))+
# scale_fill_gradient2(low = "red", high="white", midpoint = 0.5)
scale_fill_gradient(trans = "log", low = "green", high = "black", breaks = c(0, 0.001, 0.05, 0.5))
################################################
# P-Value: Phi2
################################################
ggplot(data = phi2_p, aes(x = time_point, y = genotype, fill = p)) +
labs(fill = "P-Value, \n with FDR Correction", x = "Hours", y = NULL, title = "P-Value for Phi2 using a Wilcox Test")+
geom_tile(width = 10 , height = 20)+
facet_grid(genotype ~ day, scales = "free", switch = "y")+
scale_x_continuous(breaks = round(c(0,15,24,39.5,48,63.7,72,87,96,112,120,135,144,159,168,183,192,207,216,231,240,255,264,279),0))+
theme_tufte(base_family = "Calibri",
base_size = 20)+
theme(strip.background.y = element_blank(),
strip.text.y = element_blank(),
panel.spacing=unit(0, "lines"))+
# scale_fill_gradient2(low = "red", high="white", midpoint = 0.5)
scale_fill_gradient(trans = "log", low = "green", high = "black", breaks = c(0, 0.001, 0.05, 0.5))
###I think this works!!!
filter(p_value, genotype == "mpk1", time_point == "1", measurement == "npq")$p
################################################
# P-Value: Leaf Area
################################################
ggplot(data = leafarea_p, aes(x = time_point, y = genotype, fill = p)) +
labs(fill = "P-Value, \n with FDR Correction", x = "Hours", y = NULL, title = "P-Value for Leaf Area using a Wilcox Test")+
geom_tile(width = 10 , height = 20)+
facet_grid(genotype ~ day, scales = "free", switch = "y")+
scale_x_continuous(breaks = round(c(0,15,24,39.5,48,63.7,72,87,96,112,120,135,144,159,168,183,192,207,216,231,240,255,264,279),0))+
theme_tufte(base_family = "Calibri",
base_size = 20)+
theme(strip.background.y = element_blank(),
strip.text.y = element_blank(),
panel.spacing=unit(0, "lines"))+
scale_fill_gradient(trans = "log", low = "green", high = "black", breaks = c(0, 0.001, 0.05, 0.5))
################################################
# P-Value: Leaf Area
################################################
ggplot(data = leafarea_p, aes(x = time_point, y = genotype, fill = p)) +
labs(fill = "P-Value, \n with FDR Correction", x = "Hours", y = NULL, title = "P-Value for Leaf Area using a Wilcox Test")+
geom_tile(width = 10 , height = 20)+
facet_grid(genotype ~ day, scales = "free", switch = "y")+
scale_x_continuous(breaks = round(c(0,15,24,39.5,48,63.7,72,87,96,112,120,135,144,159,168,183,192,207,216,231,240,255,264,279),0))+
theme_tufte(base_family = "Calibri",
base_size = 20)+
theme(strip.background.y = element_blank(),
strip.text.y = element_blank(),
panel.spacing=unit(0, "lines"))+
scale_fill_gradient(trans = "log", low = "green", high = "black", breaks = c(0.05, 0.5))
leafarea_p$p
summary(leafarea_p$p)
try_again%>%group_by(measured_value)%>%summarize(summary(p))
try_again%>%group_by(measurement)%>%summarize(summary(p))
try_again%>%group_by(measurement)%>%summarize(summary.stat(p))
try_again%>%group_by(measurement)%>%summarize(median = median(p), min = min(p), max = max(p))
try_again%>%filter(type == "p_adj")%>%group_by(measurement)%>%summarize(median = median(p), min = min(p), max = max(p))
try_again%>%filter(type == "p_adj", genotype != "Col0")%>%group_by(measurement)%>%summarize(median = median(p), min = min(p), max = max(p))
try_again%>%filter(type == "p_adj")%>%group_by(measurement)%>%summarize(median = median(p), min = min(p), max = max(p))
head(try_again)
try_again = data.frame()
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_genotype = length(measured_value[genotype == i]), n_wt = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype, effect, effect_size)
try_again = rbind(as.data.frame(try_this), try_again)}
for (i in unique(feb_data$genotype)){
try_this <- feb_data%>%
group_by(time_point, measurement)%>%
mutate(n_genotype = length(measured_value[genotype == i]), n_wt = length(measured_value[genotype =="Col0"]))%>%
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], exact = FALSE))$p.value)%>%
mutate(genotype = i)%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype)
try_again = rbind(as.data.frame(try_this), try_again)}
head(try_again)
try_again <- try_again%>%
distinct()%>%
mutate(p_adj = p.adjust(p, method = "fdr"))%>%
mutate(effect = abs(qnorm(p_adj))/sqrt(n_wt+n_genotype))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))
try_again
try_again <- gather(try_again, type, p, p, p_adj)%>%arrange(genotype, time_point)
try_again
summary(try_again$effect)
hist(try_again$effect)
try_again <- try_again%>%
distinct()%>%
group_by(time_point, measurement)%>%
mutate(p_adj = p.adjust(p, method = "fdr"))%>%
mutate(effect = abs(qnorm(p_adj))/sqrt(n_wt+n_genotype))%>%
mutate(effect_size = case_when(
(effect <0.2)~"small",
(effect>0.2 & effect < 0.5)~"medium",
(effect>0.5)~"large"))
try_again <- gather(try_again, type, p, p, p_adj)%>%arrange(genotype, time_point)
hist(try_again$effect)
hist(try_again$effect_size)
plot(try_again$effect_size)
try_again$effect_size
barplot(try_again$effect_size)
try_again
try_again$effect_size
barplot(try_this$effect)
barplot(try_this$effect_size)
try_again
plot(try_again$effect)
hist(try_again$effect)
barplot(try_again$effect_size)
ggplot(try_again)+
geom_bar(aes = effect_size)
try_again
colnames(try_again)
ggplot(try_again)+
geom_bar(aes(x=effect_size))
summary(try_again$effect_size)
summary(try_again$effect)
head(try_this)
head(try_this)
head(try_again)
ggplot(try_again)+
geom_bar(aes(x=effect_size))
plot(try_again$effect)
hist(try_again$effect)
??lemon
library(lemon)
??lemon
?lemon
??data.table
?data.table
library(data.table)
?Routliers
library(Routliers)
?Routliers
#############################
# Load in the data
#############################
depi_data <-read.table("DEPI_analysis_Seeger.txt", sep = ",", header = FALSE)
oad necessary packages
#############################
library(dplyr)
library(tidyverse)
library(ggplot2)
###Lemon is used in ggplot2 - facet_rep_grid modification
library(lemon)
#library(data.table)
library(ggthemes)
library(extrafont)
###Routliers is used for outliersmad to find outliers
library(Routliers)
###Make sure I need data.table when I run the code - I don't think I do
#############################
# Load in the data
#############################
depi_data <-read.table("DEPI_analysis_Seeger.txt", sep = ",", header = FALSE)
head(depi_data)
###add column names
names(depi_data) <- c("individual_plant_metadata", "genotype", "line", "subline", "border", "flat_number", "measurement_ID", "plant_ID", "measurement", "time_point", "measured_value")
###Some time points have an "X" in front of them
###Proportion of time points that have an "X":
sum(str_detect(depi_data$time_point, "X"))/nrow(depi_data)
###Rows that have an "X" in its time point:
depi_X <- depi_data[which(str_detect(depi_data$time_point, "X")),]
head(depi_X)
###Remove these X values
depi_data$time_point <- as.numeric(gsub("X","", depi_data$time_point))
depi_subset <- depi_data%>%filter(!genotype %in% c("b1", "b3", "b1b3", "ftsz2-1", "ftsz2-2", "ftsz-dbl", "Col0" )|(genotype == "Col0"&subline == "1"))
###The December collection period has "growth", while the February collection period has "size"
###Both of these measurements are recording leaf area, so change both to leafarea
levels(depi_subset$measurement)[levels(depi_subset$measurement)=="size"] <- "leafarea"
levels(depi_subset$measurement)[levels(depi_subset$measurement)=="growth"] <- "leafarea"
###Create two data sets based on collection period
###Remove border plants
feb_data <- filter(depi_subset, substr(plant_ID, 1,4) == "0218", border == FALSE)
dec_data <- filter(depi_subset, substr(plant_ID, 1,4) == "1217", border == FALSE)
###Add a column for day to the Feb data
feb_data <- feb_data%>%mutate(day = case_when(
between(time_point,0,20) ~ 1,
between(time_point,20,42)~2,
between(time_point,42,68)~3,
between(time_point,68,90)~4,
between(time_point,90,115)~5,
between(time_point,115,140)~6,
between(time_point,140,162)~7,
between(time_point,162,185)~8,
between(time_point,185,212)~9,
between(time_point,212,235)~10,
between(time_point,235,260)~11,
between(time_point,260,300)~12
))
###Some npq values are negative
###They should all be positive - shift all values by the lowest npq value (Siobhan is looking into this)
min_npq<-min((filter(feb_data, measurement == "npq"))$measured_value)
feb_data$measured_value[feb_data$measurement == "npq"] <- (feb_data$measured_value[feb_data$measurement == "npq"])+abs(min_npq)
#############################
# Use this to replace outliers with NA
#############################
###Right now, not necessary because we are using nonparametric analysis
remove_outliers <- feb_data%>%
group_by(genotype, measurement, time_point)%>%
mutate(measured_value = replace(measured_value, outliers_mad(measured_value, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
arrange(genotype, measurement, time_point)
###Number of outliers
sum(is.na(remove_outliers$measured_value))
###Proportion of measured values that are outliers
sum(is.na(remove_outliers$measured_value))/nrow(remove_outliers)
###This is a relatively high proportion! Proceed with caution
###############################################
# Beginning investigations for comparisions to WT
###############################################
###Initialize an empty data frame
p_value = data.frame()
###For each genotype:
for (i in unique(feb_data$genotype)){
indiv_data <- feb_data%>%
###Focus on each time point and measurement
group_by(time_point, measurement)%>%
###Create a column with the number of WT individual plants and the number of plants for each genotype
###Use this later to calculate effect size
mutate(n_genotype = length(measured_value[genotype == i]), n_wt = length(measured_value[genotype =="Col0"]))%>%
###Create a column of p-values using a nonparametric Wilcox test
###Default set to exact = TRUE, because our sample sizes are too small to use a normal approximation
###But, when there are ties in the values (i.e. one value appears twice in the ranking process), wilcox.test returns to the normal approximation and spits out a warning message
###This may be a problem - include correct = FALSE to stop this from happening
###More information:
###http://courses.atlas.illinois.edu/spring2016/STAT/STAT200/RProgramming/NonParametricStats.html
###https://data.library.virginia.edu/the-wilcoxon-rank-sum-test/
mutate(p = (wilcox.test(measured_value[genotype == i], measured_value[genotype == "Col0"], correct = FALSE))$p.value)%>%
###Add a column with each genotype
mutate(genotype = i)%>%
select(time_point, genotype, measurement, day, p, n_wt, n_genotype)
###Add individual information to the main data frame
p_value = rbind(as.data.frame(indiv_data), p_value)}
