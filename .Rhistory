# IN: MAPK_DEPI_data_070121.txt
# OUT: Fitness_NormalizedValues_OutliersRemoved_07212021.csv
#      Fitness_NormalizedValues_OutliersIncluded_07212021.csv
####################################################################################
###Load Necessary Packages
library(ggplot2)
library(gridExtra)
library(stringr)
library(dplyr)
library(preprocessCore)
library(Routliers)
library(tidyr)
library(ggthemes)
library(extrafont)
library(stringi)
### Read in the data
### Note: this is using the data updated July 1, 2021
data <- read.delim("C:/Users/Owner/Documents/Research/Shiu_Lab/Shiu_Lab_R/Data/MAPK_DEPI_data_070121.txt", header = TRUE)
#Make sure flat, row, column, and genotype are coded as factors
data$Flat<-as.factor(data$Flat)
data$Row<-as.factor(data$Row)
data$Column<-as.factor(data$Column)
data$Genotype <- as.factor(data$Genotype)
####################################################################################
# Outlier removal and summary
####################################################################################
### Create a unique identifier for each plant:
data$ID <- paste(data$Experiment, "_", data$Flat, "_", data$Number, sep = "")
### Create a data frame with the outliers removed
data_outliers_removed <- data%>%
###Group by experiment and genotype
group_by(Experiment, Genotype)%>%
###For each of the measurements, replace the measured value with NA if the measured value is classified as an outlier
mutate(SN = replace(SN, outliers_mad(SN, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
mutate(SPF = replace(SPF, outliers_mad(SPF, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
mutate(TSC = replace(TSC, outliers_mad(TSC, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
ungroup()%>%
###Rearrange the data by experiment and genotype
arrange(Experiment, Genotype)
### Here are the unique plants that are classified as outliers
SN_outliers <- filter(data_outliers_removed, is.na(data_outliers_removed$SN))$ID
TSC_outliers <- filter(data_outliers_removed, is.na(data_outliers_removed$TSC))$ID
SPF_outliers <- filter(data_outliers_removed, is.na(data_outliers_removed$SPF))$ID
###Summarize the proportion of measured values that are classified as outliers for TSC
data_outliers_removed%>%
group_by(Experiment)%>%
summarize(PropOutlier = sum(is.na(TSC)) / length(TSC))
###Summarize the proportion of measured values that are classified as outliers for SPF
data_outliers_removed%>%
group_by(Experiment)%>%
summarize(PropOutlier = sum(is.na(SPF)) / length(SPF))
###Summarize the proportion of measured values that are classified as outliers for SN
data_outliers_removed%>%
group_by(Experiment)%>%
summarize(PropOutlier = sum(is.na(SN)) / length(SN))
sc.data <- add_number(sc.data)%>%
rename(Genotype = Mutant)
####################################################################################
# The goal of this script is to create .csv files of the data with the outliers removed,
# as well as quantile normalization. These .csv files will be used in later R scripts to
# create visualizations and calculate epistasis and selection coefficient values. This
# allows me to run this code only once and have concise scripts in the future.
#
# IN: MAPK_DEPI_data_070121.txt
# OUT: Fitness_NormalizedValues_OutliersRemoved_07212021.csv
#      Fitness_NormalizedValues_OutliersIncluded_07212021.csv
####################################################################################
###Load Necessary Packages
library(ggplot2)
library(gridExtra)
library(stringr)
library(dplyr)
library(preprocessCore)
library(Routliers)
library(tidyr)
library(ggthemes)
library(extrafont)
library(stringi)
### Read in the data
### Note: this is using the data updated July 1, 2021
data <- read.delim("C:/Users/Owner/Documents/Research/Shiu_Lab/Shiu_Lab_R/Data/MAPK_DEPI_data_070121.txt", header = TRUE)
#Make sure flat, row, column, and genotype are coded as factors
data$Flat<-as.factor(data$Flat)
data$Row<-as.factor(data$Row)
data$Column<-as.factor(data$Column)
data$Genotype <- as.factor(data$Genotype)
filter(data, is.na(data$SN))
### Create a unique identifier for each plant:
data$ID <- paste(data$Experiment, "_", data$Flat, "_", data$Number, sep = "")
filter(data, is.na(data$SN))$data_ID
filter(data, is.na(data$SN))
data$ID
####################################################################################
# The goal of this script is to create .csv files of the data with the outliers removed,
# as well as quantile normalization. These .csv files will be used in later R scripts to
# create visualizations and calculate epistasis and selection coefficient values. This
# allows me to run this code only once and have concise scripts in the future.
#
# IN: MAPK_DEPI_data_070121.txt
# OUT: Fitness_NormalizedValues_OutliersRemoved_07212021.csv
#      Fitness_NormalizedValues_OutliersIncluded_07212021.csv
####################################################################################
###Load Necessary Packages
library(ggplot2)
library(gridExtra)
library(stringr)
library(dplyr)
library(preprocessCore)
library(Routliers)
library(tidyr)
library(ggthemes)
library(extrafont)
library(stringi)
### Read in the data
### Note: this is using the data updated July 1, 2021
data <- read.delim("C:/Users/Owner/Documents/Research/Shiu_Lab/Shiu_Lab_R/Data/MAPK_DEPI_data_070121.txt", header = TRUE)
#Make sure flat, row, column, and genotype are coded as factors
data$Flat<-as.factor(data$Flat)
data$Row<-as.factor(data$Row)
data$Column<-as.factor(data$Column)
data$Genotype <- as.factor(data$Genotype)
####################################################################################
# Outlier removal and summary
####################################################################################
### Create a unique identifier for each plant:
data$ID <- paste(data$Experiment, "_", data$Flat, "_", data$Number, sep = "")
### Create a data frame with the outliers removed
filter(data, is.na(data$SN))
filter(data, is.na(data$SN))$ID
### Find the ID's for the measured values that are already encoded as NA
filter(data, is.na(data$SN))$ID
filter(data, is.na(data$TSC))$ID
filter(data, is.na(data$SPF))$ID
### Create a data frame with the outliers removed
data_outliers_removed <- data%>%
###Group by experiment and genotype
group_by(Experiment, Genotype)%>%
###For each of the measurements, replace the measured value with NA if the measured value is classified as an outlier
mutate(SN = replace(SN, outliers_mad(SN, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
mutate(SPF = replace(SPF, outliers_mad(SPF, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
mutate(TSC = replace(TSC, outliers_mad(TSC, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
ungroup()%>%
###Rearrange the data by experiment and genotype
arrange(Experiment, Genotype)
### Here are the unique plants that are classified as outliers
SN_outliers <- filter(data_outliers_removed, is.na(data_outliers_removed$SN))$ID
TSC_outliers <- filter(data_outliers_removed, is.na(data_outliers_removed$TSC))$ID
SPF_outliers <- filter(data_outliers_removed, is.na(data_outliers_removed$SPF))$ID
SN_outliers
cbind(SN_outliers, TSC_outliers)
length(SN_outliers)
### Create a text file for this output:
n <- max(length(SN_outliers), length(TSC_outliers), length(SPF_outliers))
n
length(SN_outliers) <- n
length(TSC_outliers) <- n
length(SPF_outliers) <- n
cbind(SPF_outliers, SN_outliers, TSC_outliers)
write.table(cbind(SPF_outliers, SN_outliers, TSC_outliers),
file = "Outliers_Per_Measurement.txt")
write.csv(cbind(SPF_outliers, SN_outliers, TSC_outliers),
file = "Outliers_Per_Measurement.csv",
header = TRUE)
write.csv(cbind(SPF_outliers, SN_outliers, TSC_outliers),
file = "Outliers_Per_Measurement.csv")
### Find the ID's for the measured values that are already encoded as NA
c(filter(data, is.na(data$SN))$ID,
filter(data, is.na(data$TSC))$ID,
filter(data, is.na(data$SPF))$ID)
### Find the ID's for the measured values that are already encoded as NA
MeasuredValue_NA_ID <- c(filter(data, is.na(data$SN))$ID,
filter(data, is.na(data$TSC))$ID,
filter(data, is.na(data$SPF))$ID)
### Remove this ID's from the data frame:
data <- data%>%
filter(!ID %in% MeasuredValue_NA_ID)
data
dim(data)
### Read in the data
### Note: this is using the data updated July 1, 2021
data <- read.delim("C:/Users/Owner/Documents/Research/Shiu_Lab/Shiu_Lab_R/Data/MAPK_DEPI_data_070121.txt", header = TRUE)
dim(data)
MeasuredValue_NA_ID
dim(data%>%
filter(!ID %in% MeasuredValue_NA_ID))
### Create a unique identifier for each plant:
data$ID <- paste(data$Experiment, "_", data$Flat, "_", data$Number, sep = "")
### Find the ID's for the measured values that are already encoded as NA
MeasuredValue_NA_ID <- c(filter(data, is.na(data$SN))$ID,
filter(data, is.na(data$TSC))$ID,
filter(data, is.na(data$SPF))$ID)
dim(data%>%
filter(!ID %in% MeasuredValue_NA_ID)
)
MeasuredValue_NA_ID
dim(data%>%
filter(!(ID %in% MeasuredValue_NA_ID))
)
unique(MeasuredValue_NA_ID)
####################################################################################
# The goal of this script is to evaluate whether outliers need to be removed from the data.
#
# To do this, I will compare the fitness values for the .csv file with the outliers included and removed.
#
# Next, I will see if the p-values for the fitness measurements differ between the .csv files with outliers included and removed.
#
####################################################################################
###This function adds a column that is used to sort the Genotype in the plots:
add_number <- function(data_frame){
###First, if the Genotype is Col0 (only Genotype with length 4), assign 0 as number
###Else, assign number as Genotype with "mpk" removed
###Example: mpk1 will be 1, mpk1-17 will be 1-17
data_frame <- data_frame%>%
mutate(number = ifelse(Genotype != "Col",(stri_sub(Genotype, 4, length(Genotype))), 0))
###Next, for all double Genotypes, replace "-" with "0"
###Example: 1-17 becomes 1017
data_frame$number <- as.numeric(gsub("_","0", data_frame$number))
###Almost there! There's a problem with two single digit double Genotypes
###We need a four digit number to sort correctly
###Example: mpk1-3 -> 1-3 -> 103, but we need it to be 1003 to sort correctly
data_frame$number[data_frame$number == "103"] <- "1003"
data_frame$number[data_frame$number == "506"] <- "5006"
data_frame$number[data_frame$number == "608"] <- "6008"
data_frame$number[data_frame$number == "609"] <- "6009"
###Convert number to a numberic in order to sort
data_frame$number <- as.numeric(data_frame$number)
data_frame <- data_frame%>%arrange(number)
data_frame <- data_frame%>%mutate(number_2 = number)
data_frame$number_2[nchar(data_frame$number_2) == 4] <- 0
data_frame$number_2[nchar(data_frame$number_2) == 5] <- 0
return(data_frame)
}
###Load Necessary Packages
library(ggplot2)
library(gridExtra)
library(stringr)
library(dplyr)
library(preprocessCore)
library(Routliers)
library(tidyr)
library(ggthemes)
library(extrafont)
library(stringi)
### Read in the 6 .csv files:
pval_OutliersIncluded <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/FitnessPValues_07222021_OutliersIncluded.csv", header = TRUE, row.names = 1)
pval_OutliersRemoved <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/FitnessPValues_07222021_OutliersRemoved.csv", header = TRUE, row.names = 1)
sc_OutliersIncluded <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/selectionCoefficients_07222021_OutliersIncluded.csv", header = TRUE)
sc_OutliersRemoved <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/selectionCoefficients_07222021_OutliersRemoved.csv", header = TRUE)
ep_OutliersIncluded <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/epistasis_07222021_OutliersIncluded.csv", header = TRUE)
ep_OutliersRemoved <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/epistasis_07222021_OutliersRemoved.csv", header = TRUE)
### Merge the data frames with the outliers included and outliers removed. The column names should indicate which column has the outliers removed or included
pval.data <- left_join(pval_OutliersIncluded, pval_OutliersRemoved, by = c("Experiment", "Genotype", "Measurement"))
sc.data <- left_join(sc_OutliersIncluded, sc_OutliersRemoved, by = c("Experiment", "Genotype", "Measurement"))
ep.data <- left_join(ep_OutliersIncluded, ep_OutliersRemoved, by = c("Experiment", "DoubleGenotype", "Measurement", "GenotypeA", "GenotypeB"))
rm(list = ls())
####################################################################################
# The goal of this script is to evaluate whether outliers need to be removed from the data.
#
# To do this, I will compare the fitness values for the .csv file with the outliers included and removed.
#
# Next, I will see if the p-values for the fitness measurements differ between the .csv files with outliers included and removed.
#
####################################################################################
###This function adds a column that is used to sort the Genotype in the plots:
add_number <- function(data_frame){
###First, if the Genotype is Col0 (only Genotype with length 4), assign 0 as number
###Else, assign number as Genotype with "mpk" removed
###Example: mpk1 will be 1, mpk1-17 will be 1-17
data_frame <- data_frame%>%
mutate(number = ifelse(Genotype != "Col",(stri_sub(Genotype, 4, length(Genotype))), 0))
###Next, for all double Genotypes, replace "-" with "0"
###Example: 1-17 becomes 1017
data_frame$number <- as.numeric(gsub("_","0", data_frame$number))
###Almost there! There's a problem with two single digit double Genotypes
###We need a four digit number to sort correctly
###Example: mpk1-3 -> 1-3 -> 103, but we need it to be 1003 to sort correctly
data_frame$number[data_frame$number == "103"] <- "1003"
data_frame$number[data_frame$number == "506"] <- "5006"
data_frame$number[data_frame$number == "608"] <- "6008"
data_frame$number[data_frame$number == "609"] <- "6009"
###Convert number to a numberic in order to sort
data_frame$number <- as.numeric(data_frame$number)
data_frame <- data_frame%>%arrange(number)
data_frame <- data_frame%>%mutate(number_2 = number)
data_frame$number_2[nchar(data_frame$number_2) == 4] <- 0
data_frame$number_2[nchar(data_frame$number_2) == 5] <- 0
return(data_frame)
}
###Load Necessary Packages
library(ggplot2)
library(gridExtra)
library(stringr)
library(dplyr)
library(preprocessCore)
library(Routliers)
library(tidyr)
library(ggthemes)
library(extrafont)
library(stringi)
### Read in the
pval_OutliersIncluded <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/FitnessPValues_07222021_OutliersIncluded.csv", header = TRUE, row.names = 1)
pval_OutliersRemoved <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/FitnessPValues_07222021_OutliersRemoved.csv", header = TRUE, row.names = 1)
sc_OutliersIncluded <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/selectionCoefficients_07222021_OutliersIncluded.csv", header = TRUE)
sc_OutliersRemoved <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/selectionCoefficients_07222021_OutliersRemoved.csv", header = TRUE)
ep_OutliersIncluded <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/epistasis_07222021_OutliersIncluded.csv", header = TRUE)
ep_OutliersRemoved <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/epistasis_07222021_OutliersRemoved.csv", header = TRUE)
pval.data <- left_join(pval_OutliersIncluded, pval_OutliersRemoved, by = c("Experiment", "Genotype", "Measurement"))
sc.data <- left_join(sc_OutliersIncluded, sc_OutliersRemoved, by = c("Experiment", "Genotype", "Measurement"))
sc.data
View(sc_OutliersIncluded)
sc.data <- left_join(sc_OutliersIncluded, sc_OutliersRemoved, by = c("Experiment", "Mutant", "Measurement"))
ep.data <- left_join(ep_OutliersIncluded, ep_OutliersRemoved, by = c("Experiment", "DoubleGenotype", "Measurement", "GenotypeA", "GenotypeB"))
View(ep_OutliersRemoved)
ep.data <- left_join(ep_OutliersIncluded, ep_OutliersRemoved, by = c("Experiment", "DoubleMutant", "Measurement", "MutantA", "MutantB"))
### Add a column with "number" to sort the Genotypes by
pval.data <- add_number(pval.data)
sc.data <- add_number(sc.data)%>%
rename(Genotype = Mutant)
sc.data <- sc.data%>%
rename(Genotype = Mutant)%>%
add_number()
ep.data <- ep.data%>%
renamte(Genotype = DoubleMutant)%>%
add_number()
ep.data <- ep.data%>%
rename(Genotype = DoubleMutant)%>%
add_number()
### Re-order the Genotypes by "number
pval.data$Genotype <- reorder(pval.data$Genotype, desc(pval.data$number))
sc.data$Genotype <- reorder(sc.data$Genotype, desc(sc.data$number))
ep.data$Genotype <- reorder(ep.data$Genotype, desc(ep.data$number))
View(ep.data)
ep.data <- ep.data%>%
mutate(add.ep.diff = AdditiveEp_OutliersIncluded - AdditiveEp_OutliersRemoved)
View(ep.data)
ep.data <- ep.data%>%
mutate(add.ep.diff = AdditiveEp_OutliersIncluded - AdditiveEp_OutliersRemoved)%>%
mutate(prop.ep.diff = PropEp_OutliersIncluded - PropEp_OutliersRemoved)
### Plot the differences in p-values by measurement
ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = add.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "add. ep. (outliers included) - \nadd. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
ep.data
sum(is.na(ep.data$Measurement))
summary(ep.data$AdditiveEp_OutliersIncluded)
summary(ep.data$AdditiveEp_OutliersRemoved)
View(ep.data)
ep.data <- ep.data%>%
mutate(add.ep.diff = AdditiveEp_OutliersIncluded - AdditiveEp_OutliersRemoved)%>%
mutate(prop.ep.diff = PropEp_OutliersIncluded - PropEp_OutliersRemoved)%>%
na.omit()
### Remove this ID's from the data frame:
data <- data%>%
filter(!(ID %in% MeasuredValue_NA_ID))
####################################################################################
# The goal of this script is to create .csv files of the data with the outliers removed,
# as well as quantile normalization. These .csv files will be used in later R scripts to
# create visualizations and calculate epistasis and selection coefficient values. This
# allows me to run this code only once and have concise scripts in the future.
#
# IN: MAPK_DEPI_data_070121.txt
# OUT: Fitness_NormalizedValues_OutliersRemoved_07212021.csv
#      Fitness_NormalizedValues_OutliersIncluded_07212021.csv
####################################################################################
###Load Necessary Packages
library(ggplot2)
library(gridExtra)
library(stringr)
library(dplyr)
library(preprocessCore)
library(Routliers)
library(tidyr)
library(ggthemes)
library(extrafont)
library(stringi)
### Read in the data
### Note: this is using the data updated July 1, 2021
data <- read.delim("C:/Users/Owner/Documents/Research/Shiu_Lab/Shiu_Lab_R/Data/MAPK_DEPI_data_070121.txt", header = TRUE)
#Make sure flat, row, column, and genotype are coded as factors
data$Flat<-as.factor(data$Flat)
data$Row<-as.factor(data$Row)
data$Column<-as.factor(data$Column)
data$Genotype <- as.factor(data$Genotype)
####################################################################################
# Outlier removal and summary
####################################################################################
### Create a unique identifier for each plant:
data$ID <- paste(data$Experiment, "_", data$Flat, "_", data$Number, sep = "")
### Find the ID's for the measured values that are already encoded as NA
MeasuredValue_NA_ID <- c(filter(data, is.na(data$SN))$ID,
filter(data, is.na(data$TSC))$ID,
filter(data, is.na(data$SPF))$ID)
### Remove this ID's from the data frame:
data <- data%>%
filter(!(ID %in% MeasuredValue_NA_ID))
####################################################################################
# The goal of this script is to create .csv files of the data with the outliers removed,
# as well as quantile normalization. These .csv files will be used in later R scripts to
# create visualizations and calculate epistasis and selection coefficient values. This
# allows me to run this code only once and have concise scripts in the future.
#
# IN: MAPK_DEPI_data_070121.txt
# OUT: Fitness_NormalizedValues_OutliersRemoved_07212021.csv
#      Fitness_NormalizedValues_OutliersIncluded_07212021.csv
####################################################################################
###Load Necessary Packages
library(ggplot2)
library(gridExtra)
library(stringr)
library(dplyr)
library(preprocessCore)
library(Routliers)
library(tidyr)
library(ggthemes)
library(extrafont)
library(stringi)
### Read in the data
### Note: this is using the data updated July 1, 2021
data <- read.delim("C:/Users/Owner/Documents/Research/Shiu_Lab/Shiu_Lab_R/Data/MAPK_DEPI_data_070121.txt", header = TRUE)
#Make sure flat, row, column, and genotype are coded as factors
data$Flat<-as.factor(data$Flat)
data$Row<-as.factor(data$Row)
data$Column<-as.factor(data$Column)
data$Genotype <- as.factor(data$Genotype)
####################################################################################
# Outlier removal and summary
####################################################################################
### Create a unique identifier for each plant:
data$ID <- paste(data$Experiment, "_", data$Flat, "_", data$Number, sep = "")
### Find the ID's for the measured values that are already encoded as NA
MeasuredValue_NA_ID <- c(filter(data, is.na(data$SN))$ID,
filter(data, is.na(data$TSC))$ID,
filter(data, is.na(data$SPF))$ID)
### Remove this ID's from the data frame:
MeasuredValue_NA_ID
MeasuredValue_NA_ID <- MeasuredValue_NA_ID[-"DEPI1_2_92"]
MeasuredValue_NA_ID <- MeasuredValue_NA_ID[MeasuredValue_NA_ID != "DEPI1_2_92"]
MeasuredValue_NA_ID
filter(data, is.na(data$SN))$ID
filter(data, is.na(data$TSC))$ID
filter(data, is.na(data$SPF))$ID
data%>%filter(ID == "DEPI1_2_92")
### Create a unique identifier for each plant:
data$ID <- paste(data$Experiment, "_", data$Flat, "_", data$Number, sep = "")
### Find the ID's for the measured values that are already encoded as NA
MeasuredValue_NA_ID <- c(filter(data, is.na(data$SN))$ID,
filter(data, is.na(data$TSC))$ID,
filter(data, is.na(data$SPF))$ID)
### Melissa asked me to replace the NA values for DEPI1_2_92 with 0
MeasuredValue_NA_ID <- MeasuredValue_NA_ID[MeasuredValue_NA_ID != "DEPI1_2_92"]
### Remove this ID's from the data frame:
data <- data%>%
filter(!(ID %in% MeasuredValue_NA_ID))
data
### Now, the only remained NA values should be DEPI1_2_92 for
data%>%filter(ID == "DEPI1_2_92")
sum(is.na(data$TSC))
### Now, the only remained NA values should be DEPI1_2_92 for SPF and TSC
sum(is.na(data$SPF))
### Replace these remaining NA values with 0
data$SPF[is.na(data$SPF)] <- 0
data$TSC[is.na(data$TSC)] <- 0
sum(is.na(data$TSC))
### Now, the only remained NA values should be DEPI1_2_92 for SPF and TSC
### Verify this:
sum(is.na(data$SPF))
### Plot the differences in p-values by measurement
ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = add.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "add. ep. (outliers included) - \nadd. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
### Plot the differences in p-values by measurement
ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = prop.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "prop. ep. (outliers included) - \nprop. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
### Plot the differences in p-values by measurement
ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = prop.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "prop. ep. (outliers included) - \nprop. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
colnames(sc.data)
sc.data <- sc.data%>%
mutate(sc.diff = SC_OutliersIncluded - SC_OutliersRemoved)
sc.data
View(sc.data)
### Plot the differences in proportional epistasis by measurement
ggplot(data = sc.data, aes(x = Experiment, y = Genotype, fill = prop.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "prop. ep. (outliers included) - \nprop. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
### Plot the differences in proportional epistasis by measurement
ggplot(data = sc.data, aes(x = Experiment, y = Genotype, fill = sc.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "selection coef. (outliers included) - \nselection coef. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
sc.data <- sc.data%>%
mutate(sc.diff = SC_OutliersIncluded - SC_OutliersRemoved)%>%
na.omit()
### Plot the differences in proportional epistasis by measurement
ggplot(data = sc.data, aes(x = Experiment, y = Genotype, fill = sc.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "selection coef. (outliers included) - \nselection coef. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
