geom_tile()+
facet_grid(~Measurement)+
labs(fill = "SC")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
### Here, plot the selection coefficients with the outliers included
ggplot(data = sc.data, aes(x = Experiment, y = Genotype, fill = SC_OutliersIncluded))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "SC")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
### Plot the differences in proportional epistasis by measurement
ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = prop.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "prop. ep. (outliers included) - \nprop. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
dev.off()
### Plot the differences in proportional epistasis by measurement
ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = prop.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "prop. ep. (outliers included) - \nprop. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
### Plot the differences in proportional epistasis by measurement
plot <- ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = prop.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "prop. ep. (outliers included) - \nprop. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
tiff("PropEpDiff_NormFlat.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
### Plot the differences in proportional epistasis by measurement
plot <- ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = prop.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "p. ep. (outliers included) - \np. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
tiff("PropEpDiff_NormFlat.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
### Plot the differences in additive epistasis by measurement
plot <- ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = add.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "add. ep. (outliers included) - \nadd. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
tiff("AddEpDiff_NormFlat.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
### Plot the differences in additive epistasis by measurement
plot <- ggplot(data = ep.data, aes(x = Experiment, y = Genotype, fill = add.ep.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "a. ep. (outliers included) - \na. ep. (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
tiff("AddEpDiff_NormFlat.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
### Plot the differences in p-values by measurement
ggplot(data = pval.data, aes(x = Experiment, y = Genotype, fill = pval.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "pval (outliers included) - \npval (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
### Plot the differences in p-values by measurement
plot <- ggplot(data = pval.data, aes(x = Experiment, y = Genotype, fill = pval.diff))+
geom_tile()+
facet_grid(~Measurement)+
labs(fill = "pval (outliers included) - \npval (outliers removed)")+
scale_fill_gradient2(low = "blue", high="red", mid = "white", midpoint = 0)
tiff("PValue_Diff_OutlierComparison.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
pval.data<- pval.data%>%
mutate(pval.diff = p_adj_OutliersIncluded - p_adj_OutliersRemoved)
tiff("PValue_Diff_OutlierComparison_Hist.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
par(mfrow = c(1,3 ))
hist(filter(pval.data, Measurement == "SN")$pval.diff,
xlab = "p-val (outliers included) - p-val (outliers removed)",
main = "SN p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "SPF")$pval.diff,
xlab = "p-val (outliers included) - p-val (outliers removed)",
main = "SPF p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "TSC")$pval.diff,
xlab = "p-val (outliers included) - p-val (outliers removed)",
main = "TSC p-value comparison",
breaks = 15)
dev.off()
pval.data<- pval.data%>%
mutate(pval.diff = p_adj_OutliersIncluded - p_adj_OutliersRemoved)
tiff("PValue_Diff_OutlierComparison_Hist.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
par(mfrow = c(1,3 ))
hist(filter(pval.data, Measurement == "SN")$pval.diff,
xlab = "p-val (outliers included) - /np-val (outliers removed)",
main = "SN p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "SPF")$pval.diff,
xlab = "p-val (outliers included) - /np-val (outliers removed)",
main = "SPF p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "TSC")$pval.diff,
xlab = "p-val (outliers included) - /np-val (outliers removed)",
main = "TSC p-value comparison",
breaks = 15)
dev.off()
tiff("PValue_Diff_OutlierComparison_Hist.tiff",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
par(mfrow = c(1,3 ))
hist(filter(pval.data, Measurement == "SN")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "SN p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "SPF")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "SPF p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "TSC")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "TSC p-value comparison",
breaks = 15)
dev.off()
tiff("PValue_Diff_OutlierComparison_Hist.tiff",
res = 450,
units = "in",
width = 5,
height = 5)
par(mfrow = c(1,3 ))
hist(filter(pval.data, Measurement == "SN")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "SN p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "SPF")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "SPF p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "TSC")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "TSC p-value comparison",
breaks = 15)
dev.off()
pval.data<- pval.data%>%
mutate(pval.diff = p_adj_OutliersIncluded - p_adj_OutliersRemoved)
tiff("PValue_Diff_OutlierComparison_Hist.tiff",
res = 450,
units = "in",
width = 5.5,
height = 5.5)
par(mfrow = c(1,3 ))
hist(filter(pval.data, Measurement == "SN")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "SN p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "SPF")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "SPF p-value comparison",
breaks = 15)
hist(filter(pval.data, Measurement == "TSC")$pval.diff,
xlab = "p-val (outliers included) - \np-val (outliers removed)",
main = "TSC p-value comparison",
breaks = 15)
dev.off()
rm(list = ls())
####################################################################################
#
# The goal of this script is to first compute p-values for the data that is normalized by experiment.
# Then, compare these p-values to the p-values normalized by flat.
# Then, plot the distributions of the epistasis values for normalized by flat compared to normalized by experiment data.
#
# Finally, use bootstapping to get the 0.025 and 0.975 quantiles of the selection coefficient ()
#
####################################################################################
###Load necessary packages
library(tidyverse)
library(stringi)
library(ggthemes)
library(viridis)
library(extrafont)
library(hexbin)
library(ggplot2)
library(gridExtra)
####################################################################################
### Functions to use to plot and calculate p-values
####################################################################################
###This function adds a column that is used to sort the Genotype in the plots:
add_number <- function(data_frame){
###First, if the Genotype is Col0 (only Genotype with length 4), assign 0 as number
###Else, assign number as Genotype with "mpk" removed
###Example: mpk1 will be 1, mpk1-17 will be 1-17
data_frame <- data_frame%>%
mutate(number = ifelse(Genotype != "Col",(stri_sub(Genotype, 4, length(Genotype))), 0))
###Next, for all double Genotypes, replace "-" with "0"
###Example: 1-17 becomes 1017
data_frame$number <- as.numeric(gsub("_","0", data_frame$number))
###Almost there! There's a problem with two single digit double Genotypes
###We need a four digit number to sort correctly
###Example: mpk1-3 -> 1-3 -> 103, but we need it to be 1003 to sort correctly
data_frame$number[data_frame$number == "103"] <- "1003"
data_frame$number[data_frame$number == "506"] <- "5006"
data_frame$number[data_frame$number == "608"] <- "6008"
data_frame$number[data_frame$number == "609"] <- "6009"
###Convert number to a numeric in order to sort
data_frame$number <- as.numeric(data_frame$number)
data_frame <- data_frame%>%arrange(number)
data_frame <- data_frame%>%mutate(number_2 = number)
data_frame$number_2[nchar(data_frame$number_2) == 4] <- 0
data_frame$number_2[nchar(data_frame$number_2) == 5] <- 0
return(data_frame)
}
### Note: p_value and correct_p_value are the same functions used in the DEPI analysis
p_value <- function (data_frame){
###Initialize an empty data frame
out = data.frame()
###For each genotype:
for (i in unique(filter(data_frame, (Genotype != "Col" & Genotype != "mpk5_17"))$Genotype)){
###We don't want to make comparisons of WT to itself - this could impact FDR correction
indiv_data <- data_frame%>%
### Group by measurement
group_by(Measurement)%>%
### Add a column with the p-value
mutate(p = (wilcox.test(NormalizedExp[Genotype == i], NormalizedExp[Genotype == "Col"], correct = FALSE, paired = FALSE))$p.value)%>%
###Add a column with each genotype
mutate(Genotype = i)%>%
select(Experiment, Genotype, Measurement, p)
###Add individual information to the main data frame
out <- rbind(as.data.frame(indiv_data), out)%>%distinct()
}
return(out)
}
corrected_p_value <- function(data_frame){
out <- data_frame%>%
###Group by experiment and measurement - we are correcting by the number of genotypes
group_by(Measurement)%>%
mutate(p_adj = p.adjust(p, method = "fdr"))
return(out)
}
####################################################################################
### P-value calculation
####################################################################################
### Read in the data
data <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/csvFiles/Fitness_NormalizedValuesByExp_OutliersIncluded_07302021.csv", header = TRUE, row.names = 1)
### Apply the p_values function to the data
p_values <- p_value(data)
### Adjust the p-values using an FDR correction
adjusted_p_values <- p_values%>%
group_by(Measurement)%>%
mutate(p_adj = round(p.adjust(p, method = 'fdr'), 7))%>%
rename(p_ByExp = p,
p_adj_ByExp = p_adj)
####################################################################################
### Compare p-values between normalization schemes
####################################################################################
colnames(adjusted_p_values)
colnames(pVal_NormalizedFlat)
### Read in the p-value data from the normalization by flat, not exp
pVal_NormalizedFlat <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/csvFiles/FitnessPValues_07222021_OutliersRemoved.csv", header = TRUE, row.names = 1)
####################################################################################
### Compare p-values between normalization schemes
####################################################################################
colnames(adjusted_p_values)
colnames(pVal_NormalizedFlat)
plotData <- left_join(pVal_NormalizedFlat, adjusted_p_values, by = c("Experiment", "Genotype", "Measurement"))%>%
add_number()
plotData$Genotype <- reorder(plotData$Genotype, desc(plotData$number))
colnames(plotData) <- c("Experiment", "Genotype", "Measurement",
"p_ByFlat", "pAdj_ByFlat", "Significant_ByFlat",
"p_ByExp", "pAdj_ByExp", "Significant_ByExp", "number", "number2")
plotData
colnames(plotData)
colnames(pVal_NormalizedFlat)
colnames(adjusted_p_values)
plotData
colnames(plotData)
length(c("Experiment", "Genotype", "Measurement",
"p_ByFlat", "pAdj_ByFlat", "Significant_ByFlat",
"p_ByExp", "pAdj_ByExp", "Significant_ByExp", "number", "number2"))
rm(list = ls())
####################################################################################
#
# The goal of this script is to first compute p-values for the data that is normalized by experiment.
# Then, compare these p-values to the p-values normalized by flat.
# Then, plot the distributions of the epistasis values for normalized by flat compared to normalized by experiment data.
#
# Finally, use bootstapping to get the 0.025 and 0.975 quantiles of the selection coefficient ()
#
####################################################################################
###Load necessary packages
library(tidyverse)
library(stringi)
library(ggthemes)
library(viridis)
library(extrafont)
library(hexbin)
library(ggplot2)
library(gridExtra)
####################################################################################
### Functions to use to plot and calculate p-values
####################################################################################
###This function adds a column that is used to sort the Genotype in the plots:
add_number <- function(data_frame){
###First, if the Genotype is Col0 (only Genotype with length 4), assign 0 as number
###Else, assign number as Genotype with "mpk" removed
###Example: mpk1 will be 1, mpk1-17 will be 1-17
data_frame <- data_frame%>%
mutate(number = ifelse(Genotype != "Col",(stri_sub(Genotype, 4, length(Genotype))), 0))
###Next, for all double Genotypes, replace "-" with "0"
###Example: 1-17 becomes 1017
data_frame$number <- as.numeric(gsub("_","0", data_frame$number))
###Almost there! There's a problem with two single digit double Genotypes
###We need a four digit number to sort correctly
###Example: mpk1-3 -> 1-3 -> 103, but we need it to be 1003 to sort correctly
data_frame$number[data_frame$number == "103"] <- "1003"
data_frame$number[data_frame$number == "506"] <- "5006"
data_frame$number[data_frame$number == "608"] <- "6008"
data_frame$number[data_frame$number == "609"] <- "6009"
###Convert number to a numeric in order to sort
data_frame$number <- as.numeric(data_frame$number)
data_frame <- data_frame%>%arrange(number)
data_frame <- data_frame%>%mutate(number_2 = number)
data_frame$number_2[nchar(data_frame$number_2) == 4] <- 0
data_frame$number_2[nchar(data_frame$number_2) == 5] <- 0
return(data_frame)
}
### Note: p_value and correct_p_value are the same functions used in the DEPI analysis
p_value <- function (data_frame){
###Initialize an empty data frame
out = data.frame()
###For each genotype:
for (i in unique(filter(data_frame, (Genotype != "Col" & Genotype != "mpk5_17"))$Genotype)){
###We don't want to make comparisons of WT to itself - this could impact FDR correction
indiv_data <- data_frame%>%
### Group by measurement
group_by(Measurement)%>%
### Add a column with the p-value
mutate(p = (wilcox.test(NormalizedExp[Genotype == i], NormalizedExp[Genotype == "Col"], correct = FALSE, paired = FALSE))$p.value)%>%
###Add a column with each genotype
mutate(Genotype = i)%>%
select(Experiment, Genotype, Measurement, p)
###Add individual information to the main data frame
out <- rbind(as.data.frame(indiv_data), out)%>%distinct()
}
return(out)
}
corrected_p_value <- function(data_frame){
out <- data_frame%>%
###Group by experiment and measurement - we are correcting by the number of genotypes
group_by(Measurement)%>%
mutate(p_adj = p.adjust(p, method = "fdr"))
return(out)
}
####################################################################################
### P-value calculation
####################################################################################
### Read in the data
data <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/csvFiles/Fitness_NormalizedValuesByExp_OutliersIncluded_07302021.csv", header = TRUE, row.names = 1)
### Apply the p_values function to the data
p_values <- p_value(data)
### Adjust the p-values using an FDR correction
adjusted_p_values <- p_values%>%
group_by(Measurement)%>%
mutate(p_adj = round(p.adjust(p, method = 'fdr'), 7))%>%
rename(p_ByExp = p,
p_adj_ByExp = p_adj)
write.csv(adjusted_p_values, "PValues_NormalizedByFlatThenExp_07232021.csv", row.names = FALSE)
### Add a column with a boolean indicating if the adjusted p-value is significant or not
adjusted_p_values$significant_ByExp <- adjusted_p_values$p_adj_ByExp < 0.05
### Read in the p-value data from the normalization by flat, not exp
pVal_NormalizedFlat <- read.csv("~/Research/Shiu_Lab/Shiu_Lab_R/csvFiles/FitnessPValues_07222021_OutliersRemoved.csv", header = TRUE, row.names = 1)
####################################################################################
### Compare p-values between normalization schemes
####################################################################################
colnames(adjusted_p_values)
colnames(pVal_NormalizedFlat)
plotData <- left_join(pVal_NormalizedFlat, adjusted_p_values, by = c("Experiment", "Genotype", "Measurement"))%>%
add_number()
plotData$Genotype <- reorder(plotData$Genotype, desc(plotData$number))
colnames(plotData) <- c("Experiment", "Genotype", "Measurement",
"p_ByFlat", "pAdj_ByFlat", "Significant_ByFlat",
"p_ByExp", "pAdj_ByExp", "Significant_ByExp", "number", "number2")
### 1.9% of the p-values change from significant to not significant
sum(plotData$Significant_ByFlat ==  TRUE & plotData$Significant_ByExp == FALSE) / nrow(plotData)
### 2.2% of the p-values change from significant to not significant
sum(plotData$Significant_ByFlat ==  TRUE & plotData$Significant_ByExp == FALSE) / nrow(plotData)
### 10.5% of the p-values change from not significant to significant
sum(plotData$Significant_ByFlat ==  FALSE & plotData$Significant_ByExp == TRUE) / nrow(plotData)
### 14.5% of the p-values change from not significant to significant
sum(plotData$Significant_ByFlat ==  FALSE & plotData$Significant_ByExp == TRUE) / nrow(plotData)
### Histogram of the differences between p-values between normalization schemes
hist(plotData$pAdj_ByFlat - plotData$pAdj_ByExp,
xlab = "Adj. P-Val. by Flat - Adj. P-Val. By Flat then Exp",
main = "Differences in P-Value by Normalization Scheme")
### Histogram of the differences between p-values between normalization schemes
hist(plotData$pAdj_ByFlat - plotData$pAdj_ByExp,
xlab = "Adj. P-Val. by Flat - Adj. P-Val. By Flat then Exp",
main = "Differences in P-Value by Normalization Scheme")
par(mfrow = c(1,2))
hist(plotData$pAdj_ByExp,
main = "Adj. P-Val After Normalization \nby Flat then Exp.",
xlab = "Adj. P-Val")
hist(plotData$pAdj_ByFlat,
main = "Adj. P-Val. After Normalization \nby Flat",
xlab = "Adj. P-Val.")
plotData <- pivot_longer(plotData,
cols = c("pAdj_ByFlat", "pAdj_ByExp"),
names_to = "Normalization_Method",
values_to = "pAdj")
### Add a column for plotting purposes; this is binary based on the significance of the p-value
plotData$sig <- ifelse(plotData$pAdj < 0.05, "p < 0.05", "p > 0.05")
### Plot the p-values from the two normalization schemes for each measurement and experiment
ggplot(data = plotData, aes(x = Experiment, y = Genotype, fill = sig)) +
geom_tile()+
facet_grid(~Normalization_Method + Measurement)+
labs(fill = "Adjusted P-Value")+
theme_minimal()+
theme(text=element_text(size=12, family="Calibri"))+
scale_fill_manual(values = c("red", "black"))
### Add a column for plotting purposes; this is binary based on the significance of the p-value
plotData$sig <- ifelse(plotData$pAdj < 0.05, "p < 0.05", "p > 0.05")
### Plot the p-values from the two normalization schemes for each measurement and experiment
plot <- ggplot(data = plotData, aes(x = Experiment, y = Genotype, fill = sig)) +
geom_tile()+
facet_grid(~Normalization_Method + Measurement)+
labs(fill = "Adjusted P-Value")+
theme_minimal()+
theme(text=element_text(size=12, family="Calibri"))+
scale_fill_manual(values = c("red", "black"))
tiff("Compare_PVal_By_Normalization",
res = 450,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
### Plot the p-values from the two normalization schemes for each measurement and experiment
plot <- ggplot(data = plotData, aes(x = Experiment, y = Genotype, fill = sig)) +
geom_tile()+
facet_grid(~Normalization_Method + Measurement)+
labs(fill = "Adjusted P-Value")+
theme_minimal()+
theme(text=element_text(size=12, family="Calibri"))+
scale_fill_manual(values = c("red", "black"))
tiff("Compare_PVal_By_Normalization",
res = 400,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
### Plot the p-values from the two normalization schemes for each measurement and experiment
plot <- ggplot(data = plotData, aes(x = Experiment, y = Genotype, fill = sig)) +
geom_tile()+
facet_grid(~Normalization_Method + Measurement)+
labs(fill = "Adjusted P-Value")+
theme_minimal()+
theme(text=element_text(size=12, family="Calibri"))+
scale_fill_manual(values = c("red", "black"))
tiff("Compare_PVal_By_Normalization.tiff",
res = 400,
units = "in",
width = 6.5,
height = 6.5)
print(plot)
dev.off()
### Plot the p-values from the two normalization schemes for each measurement and experiment
plot <- ggplot(data = plotData, aes(x = Experiment, y = Genotype, fill = sig)) +
geom_tile()+
facet_grid(~Normalization_Method + Measurement)+
labs(fill = "Adjusted P-Value")+
theme_minimal()+
theme(text=element_text(size=12, family="Calibri"))+
scale_fill_manual(values = c("red", "black"))
tiff("Compare_PVal_By_Normalization.tiff",
res = 400,
units = "in",
width = 7,
height = 7)
print(plot)
dev.off()
getwd()
