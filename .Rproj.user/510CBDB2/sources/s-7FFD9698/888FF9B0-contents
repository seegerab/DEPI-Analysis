#############################
# Load necessary packages
#############################
library(dplyr)
library(ggplot2)
library(lemon)
library(data.table)
library(ggthemes)
library(extrafont)
library(Routliers)

#############################
# Load in the data
#############################

###Make a change - is this in git?
a <- 2 + 2
depi_data <-read.table("DEPI_analysis_Seeger.txt", sep = ",", header = FALSE)
names(depi_data) <- c("individual_plant_metadata", "genotype", "line", "subline", "border", "flat_number", "measurement_ID", "plant_ID", "measurement", "time_point", "measured_value")
depi_data$time_point <- as.numeric(gsub("X","", depi_data$time_point))
depi_subset <- depi_data%>%filter(!genotype %in% c("b1", "b3", "b1b3", "ftsz2-1", "ftsz2-2", "ftsz-dbl", "Col0" )|(genotype == "Col0"&subline == "1"))
levels(depi_subset$measurement)[levels(depi_subset$measurement)=="size"] <- "leafarea"
levels(depi_subset$measurement)[levels(depi_subset$measurement)=="growth"] <- "leafarea"
feb_data <- filter(depi_subset, substr(plant_ID, 1,4) == "0218")
dec_data <- filter(depi_subset, substr(plant_ID, 1,4) == "1217")
feb_data <- feb_data%>%mutate(day = case_when(
  between(time_point,0,20) ~ 1,
  between(time_point,20,42)~2,
  between(time_point,42,68)~3,
  between(time_point,68,90)~4,
  between(time_point,90,115)~5,
  between(time_point,115,140)~6,
  between(time_point,140,162)~7,
  between(time_point,162,185)~8,
  between(time_point,185,212)~9,
  between(time_point,212,235)~10,
  between(time_point,235,260)~11,
  between(time_point,260,300)~12
))
min_npq<-min((filter(feb_data, measurement == "npq"))$measured_value)
feb_data$measured_value[feb_data$measurement == "npq"] <- (feb_data$measured_value[feb_data$measurement == "npq"])+abs(min_npq)

#############################
# Use this to replace outliers with NA 
#############################
remove_outliers <- feb_data%>%
  filter(border == FALSE)%>%
  group_by(genotype, measurement, time_point)%>%
  mutate(measured_value = replace(measured_value, outliers_mad(measured_value, b=1.4826, threshold=3.5, na.rm=TRUE)$outliers_pos, NA))%>%
  arrange(genotype, measurement, time_point)

###############################################
# Beginning investigations for comparisions to WT
###############################################
get_data <- function(d, g, m){
  list<-c()
  times <- unique((filter(feb_data, day == d, genotype == g, measurement == m))$time_point)
  for (t in 1:length(times)){
    a <- filter(feb_data, measurement == m, time_point == times[t], genotype == g)
    b <- mean((filter(feb_data, measurement == m, time_point == times[t], genotype == "Col0"))$measured_value)
    c<- (log2((a$measured_value)/b))
    list <- c(list, c)}
  return(list)}
test <- filter(feb_data, measurement == "npq", time_point == "1")



a<- filter(feb_data, genotype %in%c( "Col0", "mpk1"))
test <- a%>%
  group_by(measurement, time_point)%>%
  group_by(genotype)%>%
  mutate(p_value = wilcox.test(measured_value, measured_value[genotype == "Col0"], exact = FALSE)$p.value)

cell_371_data<-feb_data%>%
  group_by(time_point, measurement, genotype)%>%
  mutate_each(funs(wilcox.test(measured_value,measured_value[genotype == "Col0"])))


test <- feb_data%>%
  group_by(time_point, measurement, genotype)%>%
  mutate(funs(wilcox.test(measured_value, measured_value[genotype=="Col0"], exact = FALSE)))


test<-feb_data%>%
  group_by(time_point, measurement, genotype)%>%
  mutate_each(wilcox.test(feb_data$measured_value, feb_data$measured_value[feb_data$genotype == "Col0"], exact = FALSE))%>%
  group_by(time_point, measurement, genotype)
  # mutate(log2_fold = log2(median(measured_value)))


test<-feb_data%>%
  group_by(time_point, measurement)%>%
  do(w = wilcox.test(measured_value[genotype == .], measured_value[genotype == "Col0"], exact = FALSE)$p.value)%>%
  summarize(p = w$p.value)
  
  

res <- df %>% group_by(id1) %>% 
  do(w = wilcox.test(x~id2, data=., paired=FALSE)) %>% 
  summarise(id1, Wilcox = w$p.value)
  #mutate_each(p = (wilcox.test(measured_value, measured_value[genotype =="Col0"], exact = FALSE))$p.value)

do_this <- function(measured_value){
  feb_data$measured_value[genotype == "Col0"]
}


test <-feb_data%>%
  group_by(time_point, measurement)%>%
  mutate_each(funs(./median(.[genotype == "Col0"])), measured_value)%>%
  group_by(time_point, measurement, genotype)%>%
  mutate(log2_fold = log2(median(measured_value)))

A <- filter(feb_data, genotype == "Col0", time_point == "1", measurement == "npq")
B <- filter(feb_data, genotype == "mpk1", time_point == "1", measurement == "npq")
C<- wilcox.test(A$measured_value, B$measured_value, exact = FALSE)







